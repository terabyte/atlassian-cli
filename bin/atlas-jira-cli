#!/usr/bin/env ruby

require 'andand'
require 'awesome_print'
require 'json'
require 'log4r'
require 'optparse'


begin
  lib_dir = File.expand_path(File.join(__FILE__, '..', '..', 'lib'))
  $LOAD_PATH.unshift lib_dir unless $LOAD_PATH.include? lib_dir
end

require 'atlassian/cli/credentials'
require 'atlassian/hashifiers/jira_issue'
require 'atlassian/hashifiers/jira_component'
require 'atlassian/monkeypatch'
require 'atlassian/rest/jira/client'

# outputters
require 'atlassian/cli/outputters/table/jira_issue'
require 'atlassian/cli/outputters/table/jira_issue_list'
require 'atlassian/cli/outputters/table/jira_component_list'
require 'atlassian/cli/outputters/json/jira_issue'
require 'atlassian/cli/outputters/json/jira_issue_list'

include Log4r

# Consts
ATLAS_CLI_RC = ".atlas-cli-rc"
VALID_COMMANDS = {
  :comment => "Add a comment to an issue by ID or key (supplied as a bare argument), comment text supplied by --commentText",
  :jql => "Query issues using JQL (argument should be a JQL query string)",
  :transition => "Transition an issue by ID or key (supplied as a bare argument)",
  :view => "View an issue by ID or key (supplied as a bare argument)",
  :viewField => "View specific field (bare argument) of an issue by ID or key (bare argument)",
  :edit => "Edit fields of an existing issue (supplied as a bare argument",
  :create => "Create an issue",
  :delete => "Delete an issue (issue key supplied as a bare argument)",
  :link => "Create an issue link",
  :delete_link => "Delete an issue link",
  :attachment => "Create/Update an attachment on an issue",
  :delete_attachment => "Delete an attachment on an issue (requires issue key AND --filename, OR --id [attachment id]",
  :download_attachment => "Download an attachment (requires issue key AND --filename, OR --id [attachment id])",
  :component => "List/Create/Delete components",
}

def parse_opts

  # defaults overridable via ~/.atlas-cli-rc
  options = {
    :endpoint => "http://localhost:2990/jira",
    :columns => nil,
    :debug => nil,
    :cacert => nil,
    :onlyfield => nil,
    :fields => {},
    :customfields => {},
    :assignee => nil,
    :priority => nil,
    :components => [],
    :fixversions => [],
    :affectsversions => [],
    :issuetype => nil,
    :projectkey => nil,
    :outputter_map => {},
    :outputter_opts => {:color => true, :hide_columns => {}},
    # to disable column wrapping, change this to include
    # :outputter_opts => { :set_width => false },
    # This may be needed to work around a missing feature in terminal-table gem
    # For details, see: https://github.com/terabyte/terminal-table/commit/68815ba7b609478d0b865fffe49987f60a571342
    # The master branch of terabyte's fork of terminal-table gem should always work.

    :username => nil, # handy to set this if you want
    :password => nil, # but probably NOT this, for security reasons
  }

  if File.readable?(File.join(Dir.home, ATLAS_CLI_RC))
    rc_str = ""
    File.open(File.join(Dir.home, ATLAS_CLI_RC)) do |f|
      f.each_line do |l|
        next if l.match(/^\s*\/\//)
        rc_str = rc_str + l.chomp
      end
    end
    options.update(JSON.parse(rc_str).deep_symbolize_keys)
  end

  options[:logger] = Logger.new('atlas-jira-cli')
  options[:logger].outputters = Outputter.stdout
  options[:logger].level = Log4r::INFO

  optparse = OptionParser.new do |o|
    o.banner = "Usage: atlas-jira-cli [command] [options]"

    o.separator ""
    o.separator "Commands:"
    VALID_COMMANDS.keys.sort.each do |k|
      o.separator sprintf("    %10s - %s", k.to_s, VALID_COMMANDS[k])
    end

    o.separator ""
    o.separator "Authentication:"
    o.separator ""
    o.separator "    By default, atlas-jira-cli will prompt you for a username and password.  You may also store your password (and username, endpoint, and cacert) in ~/.atlas-cli-rc."
    o.on('--stdin-auth', 'Read credentials from stdin, of form "username=foo\npassword=bar\n"') do |ct|
      options.update(Hash[*STDIN.read.split(/[=\n]/)].deep_symbolize_keys)
    end
    o.separator ""

    o.separator ""
    o.separator "Generic Options:"
    o.separator ""

    o.on('-e', '--endpoint [URL]', 'Endpoint (e.g. https://jira.example.com:2990/jira)') do |e|
      options[:endpoint] = e
    end

    o.on('--cacert [FILE.pem]', 'cacert file to use for SSL') do |f|
      options[:cacert] = f
    end

    o.on('-d', '--debug', 'enable debug output') do
      options[:debug] = true
      options[:logger].level = Log4r::DEBUG
    end

    o.on('-h', '--help', 'Display this screen') do
      puts o
      exit
    end

    o.separator ""
    o.separator "Output Options:"
    o.separator ""
    o.separator "    Known outputters include:"
    outputters = Atlassian::Cli::Outputters.get_outputters
    outputters.keys.sort.each do |type|
      o.separator "\tType #{type.to_s}"
      outputters[type].each do |op|
        o.separator "\t\t#{op[1]} (weight: #{op[0]})"
      end
    end
    o.separator ""
    o.separator "    You can implement your own outputter by extending Atlassian::Cli::Outputters::OutputerBase."
    o.separator ""

    o.on('-o', '--outputter [TYPE],[CLASS NAME]', "name of outputter class to use (defaults are the Table outputter).  If the outputter is in the Atlassian::Cli::Outputters namespace, you can abbreviate, e.g. 'Atlassian::Cli::Outputters::Table::JiraIssue' becomes 'Table/JiraIssue'.") do |op|
      type, op = op.split(",")
      if !op.match(':') and op.match('/')
        op = 'Atlassian::Cli::Outputters::' + op.gsub('/','::')
      end
      # TODO: verify the argument right here
      options[:outputter_map][type.to_sym] = op
    end

    o.separator "    For example, `atlas-jira-cli jql 'assignee=admin' --outputter jira_issue_list,Table/JiraIssue` will use the single-issue view on a list of issues"

    o.on('--color true/false', "Use color or not (passed to outputter)") do |c|
      if c.match(/false/i)
        puts "false!"
        options[:outputter_opts][:color] = false
      end
    end


    # TODO: allow preserving order?
    # TODO: bad touch?
    default_columns = Atlassian::Cli::Outputters::Table::JiraIssue::DEFAULT_COLUMN_MAP.keys.sort
    o.on('--columns comma,separated,list', "Comma-separated list of fields to include in display (defaults are #{default_columns.join(", ")}).  Include 'default' to add default fields to a custom list") do |l|
      unless options[:columns]
        options[:columns] = {}
      end
      l.split(',').each do |i|
        if i.match(/defaults?/i)
          default_columns.each {|x| options[:columns][x.to_sym] = true }
        else
          options[:columns][i.to_sym] = true
        end
      end
    end

    o.on('--hide-columns comma,separated,list', "Comma-separated list of fields to hide in display (passed to outputter)") do |h|
      h.split(',').each do |i|
        options[:outputter_opts][:hide_columns][i.to_sym] = true
      end
    end

    o.separator ""
    o.separator "Create Options:"
    o.separator ""

    o.on('--project-key [KEY]', "Key of the project to create the issue in") do |ct|
      # keys are always all-caps and SOME (but not all) rest endpoints are case senstiive.
      options[:projectkey] = ct.upcase
    end

    o.separator ""
    o.separator "Create/Edit Options: (project-key, issue-type, and summary are REQUIRED)"
    o.separator ""

    o.on('--summary [TEXT]', "Shorthand for --field summary,\"TEXT\"") do |t|
      options[:fields][:summary] = t
    end

    o.on('--description [TEXT]', "Shorthand for --field description,\"TEXT\"") do |t|
      options[:fields][:description] = t
    end

    o.on('--assignee [REGEX]', "Assign to user matching the given regex") do |t|
      options[:assignee] = t
    end

    o.on('--priority [REGEX]', "Change to the priority matching the given regex") do |t|
      options[:priority] = t
    end

    o.on('--components [+|-][REGEX]', "Add or remove components matching the given regex (may be used multiple times)") do |t|
      options[:components] << t
    end

    o.on('--fix-versions [+|-][REGEX]', "Add or remove fixversions matching the given regex (may be used multiple times)") do |t|
      options[:fixversions] << t
    end

    o.on('--affects-versions [+|-][REGEX]', "Add or remove fixversions matching the given regex (may be used multiple times)") do |t|
      options[:affectsversions] << t
    end

    o.on('--issue-type [REGEX]', "Text matching the name/description of the issue type (if not given for create, lowest ID is used)") do |ct|
      options[:issuetype] = ct
    end

    o.on('--parent [KEY]', "Issue which is the parent of this issue (only applicable to Sub-Task types)") do |key|
      options[:parent] = key
    end

    o.separator "    NOTE: for REGEX starting with a '-' you must do '--flag=-TEXT', '--flag -TEXT' will not parse correctly"

    o.on('--comment [TEXT]', "Text of the comment to add to the issue") do |ct|
      options[:commentText] = ct
    end

    o.on('--field NAME,"TEXT"', Array, "Text of description field") do |n,t|
      options[:fields][n.to_sym] = t
    end
    o.separator "    (some example Valid fields include summary, description, duedate, environment, timeestimate)"

    o.on('--customfield NAME,"JSON"', Array, "Name of a custom field plus the json representation of the value (see: https://developer.atlassian.com/display/JIRADEV/JIRA+REST+API+Example+-+Create+Issue for examples)") do |n,t|
      options[:customfields][n.to_sym] = JSON.parse(t)
    end
    o.separator "    (an example multiselect is: '[{\"value\":\"red\"},{\"value\":\"blue\"}]')"

    o.separator ""
    o.separator "Transition Options:"
    o.separator ""

    o.on('--state [new state]', "State to transition the issue to") do |state|
      options[:editState] = state
    end

    # TODO: enable partial matching of these, like how we do --editState?
    o.on('--resolution [resolution regex]', "Resolution to use (defaults to Fixed, other options include 'Duplicate' and 'Won't Fix', etc - assumes regex and takes the first match it finds)") do |state|
      options[:resolution] = state
    end

    o.separator ""
    o.separator "Issue Linking Options:"
    o.separator ""

    o.on('--from [outward issue key]', "Issue to link from") do |key|
      options[:outwardIssueKey] = key
    end

    o.on('--to [inward issue key]', "Issue to link to") do |key|
      options[:inwardIssueKey] = key
    end

    o.on('--link-type [regex]', "Regex for link type name (first match used)") do |lt|
      options[:linktype] = lt
    end

    o.separator ""
    o.separator "Attachment Options:"
    o.separator ""

    o.on('--path [path]', "Path to file to attach/download (required for create/download)") do |fn|
      options[:path] = fn
    end

    o.on('--id [id]', "ID of the attachment to delete or download") do |fn|
      options[:id] = fn
    end

    o.on('--filename [name]', "The filename of the attachment to delete or download") do |fn|
      options[:filename] = fn
    end

    o.separator ""
    o.separator "Component Options:"
    o.separator ""

    o.on('--list', "List components for a given project (requires --project-key)") do
      options[:componentlist] = true
    end
  end

  # this leaves unknown arguments alone
  optparse.parse!

  # now what should be left is "[command] [...]"
  command = ARGV.shift.andand.to_sym
  options[:command] = command
  case options[:command]
  when :jql
    unless options[:jql] = ARGV.shift
      puts optparse
      exit 1
    end
  when :viewField
    unless options[:onlyfield] = ARGV.shift
      puts optparse
      exit 1
    end
    unless options[:key_or_id] = ARGV.shift
      puts optparse
      exit 1
    end
  when :view, :transition, :edit, :delete
    unless options[:key_or_id] = ARGV.shift
      puts optparse
      exit 1
    end
  when :comment
    unless (options[:key_or_id] = ARGV.shift) && options[:commentText]
      puts optparse
      exit 1
    end
  when :link
    unless options[:outwardIssueKey] && options[:inwardIssueKey] && options[:linktype]
      puts optparse
      exit 1
    end
  when :delete_link
    unless options[:outwardIssueKey] && options[:inwardIssueKey] && options[:linktype]
      puts optparse
      exit 1
    end
  when :create
    unless options[:projectkey] && options[:fields][:summary]
      puts optparse
      exit 1
    end
  when :attachment
    unless (options[:key_or_id] = ARGV.shift) && options[:path]
      puts optparse
      exit 1
    end
  when :delete_attachment
    options[:key_or_id] = ARGV.shift
    unless (options[:key_or_id] && options[:filename]) || options[:id]
      puts optparse
      exit 1
    end
  when :download_attachment
    options[:key_or_id] = ARGV.shift
    unless (options[:key_or_id] && options[:filename]) || options[:id]
      puts optparse
      exit 1
    end
    unless options[:path]
      puts optparse
      exit 1
    end
  when :component
    unless options[:projectkey] && options[:componentlist]
      puts optparse
      exit 1
    end
  else
    puts optparse
    exit 1
  end
  return options
end

def get_issue_from_key_or_id(options, client, key_or_id)
  issue = nil
  if key_or_id.match(/^[0-9]+$/)
    issue = client.get_issue_by_id(key_or_id)
  else
    # try issue key
    issue = client.get_issue_by_key(key_or_id)
  end
  if issue.nil? || issue.empty?
    raise Atlassian::NotFoundError.new("Unable to find issue by key or id #{key_or_id}")
  end
  if options[:include_comments]
    issue[:comments] = client.get_comments_for_issue(issue)
  end
  if options[:debug]
    ap issue
  end
  issue
end

def display_using_outputter(options, type, data, outputter_opts = {})
  outputter = nil
  final_opts = (options[:outputter_opts] || {}).update(outputter_opts)
  if options[:outputter_map][type].nil?
   outputter = eval Atlassian::Cli::Outputters.get_default_outputter(type) + ".new(final_opts)"
  else
    outputter = eval options[:outputter_map][type] + ".new(final_opts)"
  end
  puts outputter.print_object(data)
end

begin

  options = parse_opts

  # XXX TODO: why is empty columns not the same as default?
  if options[:columns].nil?
    options[:columns] = Atlassian::Cli::Outputters::Table::JiraIssue::DEFAULT_COLUMN_MAP
  end
  if options[:debug]
    # yeah, this next line is hawt
    ap options.clone.update(:password => options[:password].andand.gsub(/./, "*"))
  end

  client = Atlassian::Rest::Jira::Client.new(options)

  unless client.test_auth
    # only prompt for pw if we aren't auth'd
    username, password = Atlassian::Cli::Credentials.new().get_credentials(options[:username], options[:password])
    client.username = username
    client.password = password
  end


  begin

    response = nil
    issue = nil
    issues = nil

    ####
    ## Main Command Loop
    ####
    case options[:command]
    when :jql
      response = client.jql(options[:jql])
      if options[:debug]
        ap response
      end

      hashes = []
      hashifier = Atlassian::Hashifiers::JiraIssue.new()
      response[:issues].each do |rest_issue|
        hashes << hashifier.get_hash(rest_issue)
      end
      display_using_outputter(options, :jira_issue_list, hashes, {:display_columns => options[:columns]})
    when :view
      issue = get_issue_from_key_or_id(options, client, options[:key_or_id])
      if options[:debug]
        ap issue
      end
      hashifier = Atlassian::Hashifiers::JiraIssue.new(:client => client, :include_comments => true)
      hash = hashifier.get_hash(issue)
      display_using_outputter(options, :jira_issue, hash, {:display_columns => options[:columns]})

    when :viewField
      issue = get_issue_from_key_or_id(options, client, options[:key_or_id])
      # too simple to need an outputter
      puts issue[options[:onlyfield].downcase.to_sym]

    when :comment
      issue = get_issue_from_key_or_id(options, client, options[:key_or_id])
      response = client.post_comment_for_issue(issue, {:body => options[:commentText]})
      if options[:debug]
        ap response
      end

    when :transition
      issue = get_issue_from_key_or_id(options, client, options[:key_or_id])
      response = client.post_transition(issue, options[:editState], options[:commentText], options[:resolution])
      if options[:debug]
        ap response
      end

    when :link
      response = client.issue_link_create(options)
      if options[:debug]
        ap response
      end

    when :delete_link
      response = client.issue_link_delete(options)
      if options[:debug]
        ap response
      end

    when :edit
      issue = get_issue_from_key_or_id(options, client, options[:key_or_id])
      edit_opts = {
        :fields => options[:fields],
        :components => options[:components],
        :fixversions => options[:fixversions],
        :affectsversions => options[:affectsversions],
        :assignee => options[:assignee],
        :priority =>options[:priority],
        :commentText => options[:commentText],
        :issuetype => options[:issuetype],
        :parent => options[:parent],
        :customfields => options[:customfields],
      }

      response = client.issue_update(issue, edit_opts)
      if options[:debug]
        ap response
      end

    when :create
      create_opts = {
        :fields => options[:fields],
        :components => options[:components],
        :fixversions => options[:fixversions],
        :affectsversions => options[:affectsversions],
        :assignee => options[:assignee],
        :priority =>options[:priority],
        :projectkey => options[:projectkey],
        :issuetype => options[:issuetype],
        :parent => options[:parent],
        :customfields => options[:customfields],
      }

      response = client.issue_create(create_opts)
      if options[:debug]
        ap response
      end

    when :delete
      response = client.issue_delete(get_issue_from_key_or_id(options, client, options[:key_or_id])[:key])
      if options[:debug]
        ap response
      end

    when :attachment
      response = client.attachment_create(options[:key_or_id], options)
      if options[:debug]
        ap response
      end

    when :delete_attachment
      response = nil
      if options[:key_or_id] && options[:filename]
        response = client.attachment_delete_by_issue_and_filename(options[:key_or_id], options[:filename], options)
      else
        response = client.attachment_delete(options[:id], options)
      end
      if options[:debug]
        ap response
      end

    when :download_attachment
      response = nil
      if options[:key_or_id] && options[:filename]
        client.attachment_download_by_issue_and_filename(options[:key_or_id], options[:filename], options)
      else
        client.attachment_download(options[:id], options)
      end
      if options[:debug]
        ap response
      end
    when :component
      hashifier = Atlassian::Hashifiers::JiraComponent.new()
      response = client.component_get(options[:projectkey], options)
      components = []
      response.each do |comp|
        components << hashifier.get_hash(comp)
      end
      display_using_outputter(options, :jira_component_list, components)

    else
      raise "ERROR: unhandled command #{options[:command]}"
    end
  rescue Atlassian::Rest::HttpStatus::HttpError => e
    puts "Got error: " + e.to_s
    ap e.content
    exit 1
  end
end

